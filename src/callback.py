from payment import *

num_post = 0
    
#–ü–æ–º–æ—â—å
def callback_help(callback):
    try:
        bot.answer_callback_query(callback.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")

    user_id, chat_id, message_id = get_easy_callback(callback)
    edit_message_text_hendler(chat_id=chat_id, message_id=message_id, text=help_text(), reply_markup=back_to_main_menu_button(), parse_mode="Markdown")

#–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def callback_main_menu(callback):
    try:
        bot.answer_callback_query(callback.id)
    except Exception as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö callback
        if "query is too old" not in str(e):
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")

    user_id, chat_id, message_id = get_easy_callback(callback)
    add_user_status(user_id, "")
    
    try:
        edit_message_text_hendler(
            chat_id=chat_id, 
            message_id=message_id, 
            text=welcome_text(user_id), 
            reply_markup=main_menu_buttons(), 
            parse_mode="Markdown"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ callback_main_menu: {e}")

# –ú–æ–∏ –ø–æ—Å—Ç—ã
def callback_my_posts(callback):
    try:
        bot.answer_callback_query(callback.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")

    global num_post
    user_id, chat_id, message_id = get_easy_callback(callback)

    add_user_status(user_id, "")

    posts = get_all_posts(user_id)
    if callback.data == 'profile':
        num_post = 0
    elif callback.data == 'before_post':
        num_post += 1
    elif callback.data == 'next_post':
        num_post -= 1

    lenn = len(posts)

    if lenn <= 0:
        kb = back_to_main_menu_button()
    elif num_post == 0 and lenn == 1:
        if posts[num_post]['approval_status'] == "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ":
            post_id = posts[num_post]['post_id']
            kb = back_to_main_menu_change_button(post_id)
        else:
            kb = back_to_main_menu_button()
    elif num_post == 0 and lenn > 1:
        if posts[num_post]['approval_status'] == "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ":
            post_id = posts[num_post]['post_id']
            kb = before_post_change_button(post_id)
        else:
            kb = before_post_button()
    elif num_post + 1 >= lenn:
        if posts[num_post]['approval_status'] == "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ":
            post_id = posts[num_post]['post_id']
            kb = next_post_change_button(post_id)
        else:
            kb = next_post_button()
    else:
        if posts[num_post]['approval_status'] == "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ":
            post_id = posts[num_post]['post_id']
            kb = before_and_next_post_change_button(post_id)
        else:
            kb = before_and_next_post_button()

    if lenn <= 0:
        text = no_post()
    else:
        text = f"üìã *–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:*\n\n{posts[num_post]['content']}\n\n*–°—Ç–∞—Ç—É—Å:* {posts[num_post]['approval_status']}"

    try:
        current_message = bot.get_message(chat_id, message_id)
        new_text = text  # –≤–∞—à –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        new_markup = kb  # –≤–∞—à–∞ –Ω–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –Ω—É–∂–Ω–æ –º–µ–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (current_message.text != new_text or 
            str(current_message.reply_markup) != str(new_markup)):
            edit_message_text_hendler(
                chat_id=chat_id, 
                message_id=message_id, 
                text=new_text, 
                reply_markup=new_markup, 
                parse_mode="Markdown"
            )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–º–µ–Ω–∏—Ç—å
        edit_message_text_hendler(
            chat_id=chat_id, 
            message_id=message_id, 
            text=text, 
            reply_markup=kb, 
            parse_mode="Markdown"
        )

#–í—ã–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
def callback_send_redact_post(callback):
    try:
        bot.answer_callback_query(callback.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")

    user_id, chat_id, message_id = get_easy_callback(callback)
    delete_message_one(user_id, chat_id)

    add_user_status(user_id, "waiting_for_post")

    #–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –î–æ–±–∞–≤–ª–µ–Ω–∏—è id —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–¥
    sent_message = bot.send_message(chat_id, after_send_post_text(), reply_markup=back_to_main_menu_button_reply(), parse_mode="Markdown")
    add_delete_message_id(user_id, sent_message.message_id)

#–û–ø–ª–∞—Ç–∞ –ø–æ—Å—Ç–∞
def callback_moderation(callback):
    try:
        bot.answer_callback_query(callback.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")

    user_id, chat_id, message_id = get_easy_callback(callback)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
    posts_available = get_posts_available(user_id)
    expires_at = get_expires_at(user_id)

    posts = get_all_posts(user_id)

    count = 0
    for post in posts:
        if post["approval_status"] == "üïê –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏":
            count +=1

    if count >= 3:
        edit_message_text_hendler(chat_id=chat_id, message_id=message_id, text=text_limit_posts(), reply_markup=back_to_main_menu_button(), parse_mode="HTML")

    else:

        if posts_available <= 0:
            if (expires_at == None or datetime.now() > datetime.fromisoformat(expires_at)):
                edit_message_text_hendler(chat_id=chat_id, message_id=message_id, text=text_pay(get_discount(user_id)), reply_markup=pay_button(user_id), parse_mode="HTML")
            else:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ - —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
                edit_message_text_hendler(chat_id=chat_id, message_id=message_id, text=moderation_text(), reply_markup=main_menu_buttons(), parse_mode="Markdown")
                post = get_save_post(user_id)
                add_post(user_id, post, callback.from_user.username, "–ü–æ–¥–ø–∏—Å–∫–∞ 30 –¥–Ω–µ–π")
        else:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ - —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
            edit_message_text_hendler(chat_id=chat_id, message_id=message_id, text=moderation_text(), reply_markup=main_menu_buttons(), parse_mode="Markdown")
            post = get_save_post(user_id)
            add_post(user_id, post, callback.from_user.username, "1 –ø–æ—Å—Ç")
            add_posts_available(user_id, posts_available - 1)

#–°–æ–∑–¥–∞–Ω–∏–µ –û–ø–ª–∞—Ç—ã
def process_payment(callback):
    try:
        bot.answer_callback_query(callback.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")

    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
    user_id, chat_id, message_id = get_easy_callback(callback)

    if get_discount(user_id) == "yes":
        tariff_info = TARIFFS_DISCOUNT_50[callback.data]
    else:
        tariff_info = TARIFFS[callback.data]
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
        payment = create_payment_link(
            user_id=user_id,
            tariff_type=callback.data,
            amount=tariff_info['amount'],
            description=f"–¢–∞—Ä–∏—Ñ {tariff_info['label']}"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        create_payment(user_id, payment.id, callback.data, tariff_info['amount'])
        
        
        payment_message = (
            f"üí≥ *–û–ü–õ–ê–¢–ê –¢–ê–†–ò–§–ê {tariff_info['label']}*\n\n"
            f"üí∞ –°—É–º–º–∞: {tariff_info['amount']} ‚ÇΩ\n\n"
            f"*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n"
            f"1. –ù–∞–∂–º–∏—Ç–µ 'üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ'\n"
            f"2. –û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç\n"
            f"3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç\n\n"
            f"‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É\n"
            f"‚è±Ô∏è –û–±—ã—á–Ω–æ –º–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç 2-3 –º–∏–Ω—É—Ç—ã"
        )
        
        edit_message_text_hendler(
            text=payment_message,
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=payment_button(payment.confirmation.confirmation_url),
            parse_mode="Markdown"
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞
        start_payment_checking(payment.id, chat_id, message_id, user_id, callback.data, callback.from_user.username)
        
    except Exception as e:
        error_message = (
            "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞*\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @admgrz"
        )
        edit_message_text_hendler(
            text=error_message,
            chat_id=chat_id,
            message_id=message_id,
            parse_mode="Markdown"
        )
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")

def free_post(callback):
    try:
        bot.answer_callback_query(callback.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")

    user_id, chat_id, message_id = get_easy_callback(callback)
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ - —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    edit_message_text_hendler(chat_id=chat_id, message_id=message_id, text=moderation_text(), reply_markup=main_menu_buttons(), parse_mode="Markdown")
    post = get_save_post(user_id)
    add_post(user_id, post, callback.from_user.username, "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ—Å—Ç")



'''
##################################################

                CALLBACK STARTWITH

##################################################
'''
#–ü—Ä–æ—à–ª–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é
def approve(callback):
    post_id = int(callback.data.split("_")[1])
    add_approval_status(post_id, "‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ")
    content = get_content(post_id)
    price = get_price(post_id)

    

    edit_message_text_hendler(
        chat_id=callback.message.chat.id,
        message_id=callback.message.id,
        text=f"‚úÖ –ü–æ—Å—Ç {post_id} –æ–¥–æ–±—Ä–µ–Ω\n--------------------------\n{content}\n--------------------------",
    )
    post_data = get_post_data(post_id)
    if post_data:
        user_id = post_data["user_id"]
        content = post_data["content"]
        content += "\n\n #—Ä–µ–∫–ª–∞–º–∞"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É
        delete_message_one(user_id, get_chat_id(user_id))
        sent_message = bot.send_message(
            user_id, text_after_approve(), reply_markup=main_menu_buttons(), parse_mode="Markdown"
        )
        add_delete_message_id(user_id, sent_message.message_id)

        # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç –≤ –≥—Ä—É–ø–ø–µ
        for i in range(len(GROUP_CHAT_ID)):
            try:
                sent_message = bot.send_message(GROUP_CHAT_ID[i], content)

                if price == "pay_premium":
                    bot.pin_chat_message(
                        chat_id=GROUP_CHAT_ID[i], 
                        message_id=sent_message.message_id,
                        disable_notification=True
                    )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")

#–ù–µ –ø—Ä–æ—à–ª–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é
def reject(callback):
    post_id = int(callback.data.split("_")[1])
    add_approval_status(post_id, "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
    user_id = callback.from_user.id
    add_user_status(user_id, f"waiting_reason_{post_id}")
    edit_message_text_hendler(
        chat_id=callback.message.chat.id,
        message_id=callback.message.id,
        text=f"‚ùå –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É",
    )

#—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
def rpost(callback):
    try:
        bot.answer_callback_query(callback.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")

    user_id, chat_id, message_id = get_easy_callback(callback)
    post_id = int(callback.data.split("_")[1])

    add_user_status(user_id, f"waiting_redact_{post_id}")
    edit_message_text_hendler(chat_id=chat_id, message_id=message_id, text=redact_text(), reply_markup=my_posts_buttons(), parse_mode="Markdown")
