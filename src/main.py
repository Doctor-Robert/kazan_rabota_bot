from commands import *

init_db()


# –ö–û–ú–ê–ù–î–´
@bot.message_handler(commands=["start", "chat_id", "admin", "send", "show_users", "add_pay_basic", "add_pay_hrplus", "send_info_all_users", "discount_yes", "discount_no", "send_show_post"])
def start_handler(message):
    user_id, chat_id, username = get_easy_message(message)
    add_user_status(user_id, "")

    if len(message.text.split()) > 1 and message.text.split()[1] == 'post':
        post(message)
    elif message.text == "/start":
        start(message)
    elif message.text == "/chat_id":
        bot.send_message(chat_id, chat_id)

    #–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    if str(chat_id) == ADMIN_ID:
        if message.text == "/admin":
            admin(message)
        elif message.text == "/send":
            send()
        elif message.text == "/send_show_post":
            send_show_post()
        elif message.text == "/show_users":
            show_users(message)
        elif message.text == "/add_pay_basic":
            add_pay_basic(message)
        elif message.text == "/add_pay_hrplus":
            add_pay_hrplus(message)
        elif message.text == "/send_info_all_users":
            send_info_all_users(message)
        elif message.text == '/discount_yes':
            dicount_yes(message)
        elif message.text == '/discount_no':
            dicount_no(message)

# CALLBACK
@bot.callback_query_handler(func=lambda call: call.data in CALLBACK)
def callback_handler(callback):
    answer = callback.data

    # –û–ë–†–ê–ë–û–¢–ö–ê –†–ê–ó–ù–´–• –û–¢–í–ï–¢–û–í
    if answer == "help":
        callback_help(callback)
    elif answer == "back_to_main_menu":
        callback_main_menu(callback)
    elif answer in ["profile", "before_post", "next_post"]:
        callback_my_posts(callback)
    elif answer in ["send_post", "redact"]:
        callback_send_redact_post(callback)
    elif answer == "moderation":
        callback_moderation(callback)
    elif answer in ["pay_basic", "pay_premium", "pay_hrplus"]:
        process_payment(callback)
    elif answer == "check_payment":
        check_payment_handler(callback)

@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_") or call.data.startswith("reject_") or call.data.startswith("rpost_"))
def approve_post(callback):
    if callback.data.startswith("approve_"):
        approve(callback)
    elif callback.data.startswith("reject_"):
        reject(callback)
    elif callback.data.startswith("rpost_"):
        rpost(callback)

# –¢–ï–ö–°–¢
@bot.message_handler(func=lambda message: message.text == "üìã –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ")
def back_to_main_menu_handler(message):
    user_id, chat_id, username = get_easy_message(message)

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.text == "üìã –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ":
        delete_message_plus(user_id, chat_id)

        # –°—Ç–∞—Ç—É—Å = None
        add_user_status(user_id, "")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        sent_message = bot.send_message(
            chat_id,
            welcome_text(user_id),
            reply_markup=main_menu_buttons(), parse_mode="Markdown"  # Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        add_delete_message_id(user_id, sent_message.message_id)

# –°–¢–ê–¢–£–°–´
@bot.message_handler(func=lambda message: get_user_status(message.from_user.id) in ["waiting_for_post", "waiting_nick_basic", "waiting_nick_hr", "waiting_message_to_sand"] or get_user_status(message.from_user.id).startswith("waiting_reason_") or get_user_status(message.from_user.id).startswith("waiting_redact_"))
def status_hendler(message):
    user_id, chat_id, username = get_easy_message(message)

    status = get_user_status(user_id)

    # –°—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
    if status == "waiting_for_post":
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        delete_message_one(user_id, chat_id)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –î–æ–±–∞–≤–ª–µ–Ω–∏—è id —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–¥
        sent_message = bot.send_message(
            message.chat.id,
            f"‚úÖ *–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:*\n\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n{message.text}\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n\n*–í—Å—ë –≤–µ—Ä–Ω–æ?*",
            reply_markup=redact_button(),
            parse_mode="Markdown",
        )
        add_delete_message_id(user_id, sent_message.message_id)

        # –ù—É–ª–µ–≤–æ–π —Å—Ç–∞—Ç—É—Å
        add_user_status(user_id, "")
        add_save_post(user_id, message.text)

    if status.startswith("waiting_reason_"):
        post_id = int(status.split("_")[2])
        post_data = get_post_data(post_id)

        if post_data:
            author_id = post_data["user_id"]
            content = post_data["content"]

            delete_message_one(author_id, get_chat_id(author_id))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É
            text = (
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ *–Ω–µ –ø—Ä–æ—à–ª–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é*.\n\n"
                "üìã *–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:*\n"
                f"_{message.text}_\n\n"
                "üõ† *–ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:*\n"
                "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´üìä –ú–û–ò –ü–û–°–¢–´¬ª\n"
                "2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚úèÔ∏è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨¬ª\n"
                "3. –í–Ω–µ—Å–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∫–∏\n"
                "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n\n"
            )
            sent_message = bot.send_message(
                author_id, text, reply_markup=my_posts_buttons(), parse_mode="Markdown"
            )

            add_user_status(user_id, "")
            add_delete_message_id(author_id, sent_message.message_id)

            bot.send_message(
                chat_id, f"‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ—Ä—É –ø–æ—Å—Ç–∞ #{post_id}\n---------------------------\n{content}\n---------------------------"
            )
        else:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            add_user_status(user_id, "")

    if status == "waiting_nick_basic":
        users = get_all_users()
        flag = False
        for user in users:
            if message.text == user['username']:
                true_user = user
                flag = True
                break
        if flag:
            activate_tariff(true_user['user_id'], 'pay_basic')
            bot.send_message(chat_id, f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{true_user['username']}, –¥–æ–±–∞–≤–ª–µ–Ω 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ—Å—Ç")

        else:
            bot.send_message(chat_id, "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç")

        add_user_status(user_id, "")

    if status == "waiting_nick_hr":
        users = get_all_users()
        flag = False
        for user in users:
            if message.text == user['username']:
                true_user = user
                flag = True
                break
        if flag:
            activate_tariff(true_user['user_id'], 'pay_hrplus')
            bot.send_message(chat_id, f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{true_user['username']}, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π")

        else:
            bot.send_message(chat_id, "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç")

        add_user_status(user_id, "")

    if status.startswith("waiting_redact_"):
        post_id = int(status.split("_")[2])
        post_data = get_post_data(post_id)
        if post_data:
            author_id = post_data["user_id"]

            add_approval_status(post_id, 'üïê –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏')
            add_content(post_id, message.text)

            delete_message_one(author_id, get_chat_id(author_id))

            sent_message = bot.send_message(chat_id, text=moderation_text(), reply_markup=main_menu_buttons(), parse_mode="Markdown")

            add_delete_message_id(author_id, sent_message.message_id)

            send_post_to_admins(post_id, message.text, username, "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ—Å—Ç")

            add_user_status(user_id, "")

    if status == "waiting_message_to_sand":
        users = get_all_users()
        if message.text != "–û—Ç–º–µ–Ω–∞":
            for user in users:
                bot.send_message(user['chat_id'], message.text)
        add_user_status(user_id, "")


bot.polling()
