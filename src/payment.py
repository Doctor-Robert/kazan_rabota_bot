from get_easy_func import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ÆKassa
Configuration.account_id = os.environ.get("YOOKASSA_SHOP_ID")
Configuration.secret_key = os.environ.get("YOOKASSA_SECRET_KEY")

def create_payment_link(user_id, tariff_type, amount, description):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa —Å email –¥–ª—è —á–µ–∫–∞"""
    idempotence_key = str(uuid.uuid4())
    
    payment = Payment.create({
        "amount": {
            "value": f"{amount:.2f}",
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": "https://t.me/Gruzchik_Kazan_bot"
        },
        "capture": True,
        "description": description,
        "metadata": {
            "user_id": user_id,
            "tariff_type": tariff_type
        },
        "receipt": {
            "customer": {
                "email": f"user{user_id}@yookassa.ru"  # –í—Ä–µ–º–µ–Ω–Ω—ã–π email
            },
            "items": [
                {
                    "description": description[:128],
                    "quantity": "1",
                    "amount": {
                        "value": f"{amount:.2f}",
                        "currency": "RUB"
                    },
                    "vat_code": "1",
                    "payment_mode": "full_payment",
                    "payment_subject": "service"
                }
            ]
        }
    }, idempotence_key)
    
    return payment

def start_payment_checking(payment_id, chat_id, message_id, user_id, tariff_type, username):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    thread = threading.Thread(
        target=check_payment_status, 
        args=(payment_id, chat_id, message_id, user_id, tariff_type, username)
    )
    thread.daemon = True
    thread.start()

def check_payment_status(payment_id, chat_id, message_id, user_id, tariff_type, username):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    for i in range(30):  # 5 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        time.sleep(10)
        
        try:
            payment_info = Payment.find_one(payment_id)
            
            if payment_info.status == "succeeded":
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–∞—Ä–∏—Ñ
                update_payment_status(payment_id, "succeeded")
                activate_tariff(user_id, tariff_type)


                # –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –£–°–ü–ï–®–ù–û–ô –û–ü–õ–ê–¢–ï
                success_message = (
                    "‚úÖ *–û–ü–õ–ê–¢–ê –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù–ê!* \n\n"
                    
                    "üîÑ *–ß—Ç–æ –¥–∞–ª—å—à–µ?*\n"
                    "‚ñ´Ô∏è –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à –ø–æ—Å—Ç\n"  
                    "‚ñ´Ô∏è –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
                    "‚ñ´Ô∏è –ü–æ—Å—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ –ª–µ–Ω—Ç–µ\n\n"
                    
                    "üôè *–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!*\n"
                    "–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–≤–∏–¥—è—Ç —Ç—ã—Å—è—á–∏ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π! üë•"
                )

                posts_available = get_posts_available(user_id)
                add_posts_available(user_id, posts_available - 1)

                post = get_save_post(user_id)
                add_post(user_id, post, username, tariff_type)

                try:
                    edit_message_text_hendler(
                        text=success_message,
                        chat_id=chat_id, 
                        message_id=message_id,
                        reply_markup=main_menu_buttons(),
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    print(f"—Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω–æ: {e}")

                    if "message is not modified" not in str(e):
                        bot.send_message(
                            chat_id=chat_id, 
                            text=success_message, 
                            reply_markup=main_menu_buttons(),
                            parse_mode="Markdown"
                        )

                break
                
            elif payment_info.status == "canceled":
                update_payment_status(payment_id, "canceled")
                edit_message_text_hendler(
                    text="‚ùå *–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞*\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                    chat_id=chat_id, 
                    message_id=message_id,
                    parse_mode="Markdown"
                )
                break
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
    
    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ
    payment = get_payment_by_id(payment_id)
    if payment and payment['status'] == 'pending':
        update_payment_status(payment_id, "timeout")